plugins {
    // id 'java'  // Uncomment if you are using Java
    id 'com.github.node-gradle.node' version '7.1.0'
    id 'com.enonic.xp.app' version '3.6.2'
}

app {
    name = "${appName}"
    displayName = "${appDisplayName}"
    vendorName = "${vendorName}"
    vendorUrl = "${vendorUrl}"
    systemVersion = "${xpVersion}"
}

dependencies {
    // Uncomment if you are using Java
    // compileOnly "com.enonic.xp:core-api:${xpVersion}"
    // compileOnly "com.enonic.xp:portal-api:${xpVersion}"

    include "com.enonic.xp:lib-event:${xpVersion}"
    include "com.enonic.xp:lib-content:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include "com.enonic.lib:lib-mustache:2.1.1"
    include "com.enonic.lib:lib-static:2.1.0"
    //include "com.enonic.xp:lib-auth:${xpVersion}"
    //include "com.enonic.xp:lib-context:${xpVersion}"
    //include "com.enonic.xp:lib-i18n:${xpVersion}"
    //include "com.enonic.xp:lib-io:${xpVersion}"
    //include "com.enonic.xp:lib-mail:${xpVersion}"
    //include "com.enonic.xp:lib-repo:${xpVersion}"
    //include "com.enonic.xp:lib-websocket:${xpVersion}"
    //include "com.enonic.lib:lib-util:3.0.0"

    // Uncomment if you want to add tests using Enonic test framework
    testImplementation "com.enonic.xp:testing:${xpVersion}"
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}

node {
    download = true
    version = '20.12.2'
}

tasks.register('npmInstallForce', NpmTask) {
    description = 'Update all project node dependencies'
    args = ['install', '--force']
}

tasks.register('cleanNode', Delete) {
    delete 'node_modules'
}

tasks.register('clientWebpack', NodeTask) {
    dependsOn npmInstall
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.client.config.js', '--color' ]
    description = 'Build UI resources (js, css, etc).'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

tasks.register('serverWebpack', NodeTask) {
    dependsOn npmInstall
    environment = [ 'NODE_ENV': nodeEnvironment() ]
    args = [ '--config', 'webpack.server.config.js', '--color' ]
    description = 'Build server JS.'
    inputs.dir 'src/main'
    outputs.dir "${buildDir}/resources/main"
    script = file( 'node_modules/webpack-cli/bin/cli.js' )
}

tasks.register('dev', Exec) {
    if (System.getProperty('os.name').toLowerCase().contains('windows')) {
        commandLine 'gradlew.bat', 'deploy', '-t'
    } else {
        commandLine './gradlew', 'deploy', '-t'
    }
}

processResources {
    include '**/*'
    exclude '**/.gitkeep'
    exclude '**/tsconfig.json'
    exclude '**/*.es'
    exclude '**/*.es6'
    exclude '**/*.ts'
    exclude 'assets/js/**/*.js'
    include 'assets/js/bundle.js'
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    includeEmptyDirs false
}

jar {
    exclude 'assets/styles/**/*.less'
    exclude 'assets/styles/**/*.sass'
    exclude 'assets/styles/**/*.scss'
    exclude 'assets/styles/**/*.js'

    dependsOn += clientWebpack
    dependsOn += serverWebpack
}

def nodeEnvironment() {
    def environments = [ prod : 'production', dev: 'development' ]
    def nodeEnv = environments[hasProperty( 'env' ) ? env : 'prod']
    return nodeEnv != null ? nodeEnv : 'production'
}
